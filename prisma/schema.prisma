// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int          @id
  name        String
  user        User[]
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id         Int    @id
  role       Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId     Int
  action     String
  subject    String
  conditions Json?

  @@map("permissions")
}

model User {
  uuid            String           @id @default(uuid())
  email           String           @unique
  firstName       String
  lastName        String
  password        String
  address         Address?         @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId       Int?
  phoneNumber     String?
  role            Role             @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId          Int
  client          Client?
  clientRelatives ClientRelative[]
  createdEvents   Event[]          @relation("createdBookings")
  updatedEvents   Event[]          @relation("updatedBookings")
  events          Event[]

  @@map("users")
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  zipCode String
  area    String
  users   User[]

  @@unique(fields: [street, zipCode, area], name: "address_identifier")
  @@map("addresses")
}

model Client {
  uuid      String           @id @default(uuid())
  firstName String
  lastName  String
  bornAt    DateTime         @db.Date
  assets    ClientAsset[]
  schedules Schedule[]
  events    Event[]
  user      User?            @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId    String?          @unique
  relatives ClientRelative[]
  note      String?

  @@map("clients")
}

model ClientRelative {
  user     User    @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  client   Client  @relation(fields: [clientId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientId String
  note     String?

  @@unique([userId, clientId], name: "client_relative_identifier")
  @@map("client_relative")
}

model ClientAsset {
  client   Client  @relation(fields: [clientId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientId String
  asset    Asset   @relation(fields: [assetId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  assetId  String
  note     String?

  @@unique([clientId, assetId], name: "client_asset_identifier")
  @@map("client_asset")
}

enum AssetStatus {
  ACTIVE
  INACTIVE
}

model Asset {
  uuid    String        @id @default(uuid())
  name    String        @unique
  status  AssetStatus   @default(ACTIVE)
  clients ClientAsset[]
  events  Event[]
  note    String?

  @@map("assets")
}

enum SemesterPeriod {
  SPRING
  FALL
}

model Semester {
  uuid      String         @id @default(uuid())
  startAt   DateTime       @db.Date
  endAt     DateTime       @db.Date
  year      Int
  period    SemesterPeriod
  schedules Schedule[]

  @@unique([year, period])
  @@map("semesters")
}

enum SemesterPlan {
  FULL
  HALF
}

model Schedule {
  uuid         String          @id @default(uuid())
  client       Client          @relation(fields: [clientId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientId     String
  semesterPlan SemesterPlan
  events       ScheduleEvent[]
  semester     Semester        @relation(fields: [semesterId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  semesterId   String

  @@map("schedules")
}

model ScheduleEvent {
  schedule   Schedule @relation(fields: [scheduleId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  scheduleId String   @unique
  event      Event    @relation(fields: [eventId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  eventId    String   @unique
  note       String?

  @@unique([scheduleId, eventId], name: "schedule_event_identifier")
  @@map("schedule_event")
}

enum EventType {
  ACTIVE
  BLOCKING
}

model Event {
  uuid            String         @id @default(uuid())
  asset           Asset          @relation(fields: [assetId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  assetId         String
  user            User           @relation(fields: [uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  client          Client         @relation(fields: [clientId], references: [uuid])
  clientId        String
  startAt         DateTime
  endAt           DateTime
  note            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       User           @relation("createdBookings", fields: [creatingStaffId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  updatedBy       User?          @relation("updatedBookings", fields: [updatingStaffId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  creatingStaffId String
  updatingStaffId String?
  shedule         ScheduleEvent?
  eventGroup      EventGroup?    @relation(fields: [eventGroupId], references: [id])
  eventGroupId    Int

  @@map("events")
}

model EventGroup {
  id      Int      @id @default(autoincrement())
  startAt DateTime @db.Time()
  endAt   DateTime @db.Time()
  events  Event[]

  @@map("event_groups")
}
