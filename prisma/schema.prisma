// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int          @id
  name        String
  user        User[]
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id         Int    @id
  role       Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId     Int
  action     String
  subject    String
  conditions Json?

  @@map("permissions")
}

model User {
  uuid                 String           @id @default(uuid())
  email                String           @unique
  firstName            String
  lastName             String
  password             String
  address              Address?         @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId            Int?
  phoneNumber          String?
  role                 Role             @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId               Int
  client               Client?
  clientRelatives      ClientRelative[]
  createdEvents        Event[]          @relation("createdEvents")
  updatedEvents        Event[]          @relation("updatedEvents")
  createdScheduleShift ScheduleShift[]  @relation("createdScheduleShifts")
  updatedScheduleShift ScheduleShift[]  @relation("updatedScheduleShifts")
  events               Event[]
  schedule             Schedule[]
  // scheduleShifts       ScheduleShift[]

  @@map("users")
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  zipCode String
  area    String
  users   User[]

  @@unique(fields: [street, zipCode, area], name: "address_identifier")
  @@map("addresses")
}

model Client {
  uuid      String           @id @default(uuid())
  firstName String
  lastName  String
  bornAt    DateTime         @db.Date
  assets    ClientAsset[]
  schedules Schedule[]
  events    Event[]
  user      User?            @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId    String?          @unique
  relatives ClientRelative[]
  note      String?

  @@map("clients")
}

model ClientRelative {
  user     User    @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  client   Client  @relation(fields: [clientId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientId String
  note     String?

  @@unique([userId, clientId], name: "client_relative_identifier")
  @@map("client_relative")
}

model ClientAsset {
  client   Client  @relation(fields: [clientId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientId String
  asset    Asset   @relation(fields: [assetId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  assetId  String
  note     String?

  @@unique([clientId, assetId], name: "client_asset_identifier")
  @@map("client_asset")
}

enum AssetStatus {
  ACTIVE
  INACTIVE
}

model Asset {
  uuid    String        @id @default(uuid())
  name    String        @unique
  status  AssetStatus   @default(ACTIVE)
  clients ClientAsset[]
  events  Event[]
  note    String?

  @@map("assets")
}

enum SemesterPeriod {
  SPRING
  FALL
}

model Semester {
  uuid        String         @id @default(uuid())
  startAt     DateTime       @db.Date
  endAt       DateTime       @db.Date
  year        Int
  period      SemesterPeriod
  schedules   Schedule[]
  eventGroups EventGroup[]

  @@unique([year, period], name: "semester_identifier")
  @@map("semesters")
}

enum SemesterPlan {
  FULL
  HALF
  STAFF
}

model Schedule {
  uuid           String          @id @default(uuid())
  client         Client?         @relation(fields: [clientId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientId       String?
  staff          User?           @relation(fields: [staffId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  staffId        String?
  eventGroup     EventGroup?     @relation(fields: [eventGroupId], references: [uuid])
  eventGroupId   String?
  semesterPlan   SemesterPlan
  events         Event[]
  semester       Semester        @relation(fields: [semesterId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  semesterId     String
  scheduleShifts ScheduleShift[]
  scheduleFor    String

  @@unique([scheduleFor, semesterId])
  @@map("schedules")
}

model ScheduleShift {
  uuid           String              @id @default(uuid())
  startAt        DateTime            @db.Timestamptz()
  endAt          DateTime            @db.Timestamptz()
  note           String?
  createdAt      DateTime            @default(now()) @db.Timestamptz()
  updatedAt      DateTime            @updatedAt @db.Timestamptz()
  dateIdentifier DateTime
  createdBy      User                @relation("createdScheduleShifts", fields: [createdById], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  updatedBy      User?               @relation("updatedScheduleShifts", fields: [updatedById], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  createdById    String
  updatedById    String?
  // user           User                @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  schedule       Schedule            @relation(fields: [scheduleId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  scheduleId     String
  events         Event[]
  tasks          ScheduleShiftTask[]

  @@unique([userId, dateIdentifier])
  @@map("schedule_shifts")
}

model ScheduleShiftTask {
  uuid          String        @id @default(uuid())
  startAt       DateTime      @db.Timestamptz()
  endAt         DateTime      @db.Timestamptz()
  note          String?
  scheduleShift ScheduleShift @relation(fields: [uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)

  @@map("schedule_shift_tasks")
}

enum EventType {
  STAFF
  CLIENT
}

model Event {
  uuid             String         @id @default(uuid())
  asset            Asset?         @relation(fields: [assetId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  assetId          String?
  staff            User?          @relation(fields: [staffId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  staffId          String?
  client           Client?        @relation(fields: [clientId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientId         String?
  startAt          DateTime       @db.Timestamptz()
  endAt            DateTime       @db.Timestamptz()
  note             String?
  createdAt        DateTime       @default(now()) @db.Timestamptz()
  updatedAt        DateTime       @updatedAt @db.Timestamptz()
  createdBy        User           @relation("createdEvents", fields: [createdById], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  updatedBy        User?          @relation("updatedEvents", fields: [updatedById], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  createdById      String
  updatedById      String?
  isActive         Boolean        @default(true)
  isBlocking       Boolean        @default(false)
  scheduleShift    ScheduleShift? @relation(fields: [scheduleShiftId], references: [uuid])
  scheduleShiftId  String?
  clientSchedule   Schedule?      @relation(fields: [clientScheduleId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  clientScheduleId String?
  eventGroup       EventGroup?    @relation(fields: [eventGroupId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  eventGroupId     String?

  @@map("events")
}

model EventGroup {
  uuid       String     @id @default(uuid())
  startAt    String
  endAt      String
  weekday    Int        @db.SmallInt()
  semester   Semester   @relation(fields: [semesterId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  semesterId String
  events     Event[]
  schedules  Schedule[]

  @@unique([startAt, endAt, weekday, semesterId], name: "event_group_identifier")
  @@map("event_groups")
}
